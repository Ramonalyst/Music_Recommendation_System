# -*- coding: utf-8 -*-
"""Obama's playlists 2019-2023 enriched - Exploration

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UZ_76SHQH6eiO1vkdeWFEVcN9fyte3hS

# Loading the data
"""

import pandas as pd
import plotly.express as px

import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns

df = pd.read_csv("/content/barack_obamas_playlist_2019-2023_clean_enriched.csv")

"""#Data Exploration"""

df.shape

print(df.columns)

pd.DataFrame(df.columns, columns=["Column Names"])

df.info()

df.head()

"""#Data cleaning"""

for feature in ["valence", "duration_min", "loudness", "danceability", "energy", "acousticness", "instrumentalness", "liveness", "speechiness"]:
  df[feature] = df[feature].str.replace(',', '.').astype(float)

df["track_album_release_year"] = df["track_album_release_year"].str.replace(r'\D', '', regex=True).astype(int)

df.info()

duplicates = df.duplicated()

duplicates.sum()

df = df.drop_duplicates()

df.shape

df.isnull().sum()

"""#ObamaÂ´s Taste Exploration

#Data visualization
"""

sorted_counts = df["genres"].value_counts().sort_values(ascending=False)
sorted_genres = sorted_counts.index.tolist()

fig = px.bar(df, x="genres", title="genres Count",
             category_orders={"genres": sorted_genres})
fig.show()

"""##Artists"""

grouped_by_artist = df.groupby("track_artist").count()
grouped_by_artist.sort_values("track_name", ascending=False).head(20)

"""##Release Year"""

grouped_by_year = df.groupby("track_album_release_year").count()
grouped_by_year.sort_values("track_name", ascending=False)

"""which music era does Obama prefer?"""

#visualize number of songs (track_name) per year
plt.figure(figsize=(10, 6))
plt.bar(grouped_by_year.index, grouped_by_year['track_name'])
plt.xlabel('Year')
plt.ylabel('Number of Songs')
plt.title('Songs per year');

df["track_album_release_year"].min()

df["track_album_release_year"].max()

"""the playlists are from 2019-2023 and the majority of the songs also seem to be within this time frame. At first glance, it looks like the playlists are supposed to be relevant for the respective years

##Popularity
"""

artist_popularity = df.groupby("track_artist")["artist_popularity"].mean()
artist_popularity.sort_values(ascending=False).head(20)

track_popularity = df.groupby("track_name")["track_popularity"].mean()
track_popularity.sort_values(ascending=False).head(20)

print("Average Track Popularity: ", track_popularity.mean())
print("Median Track Popularity: ", track_popularity.median())
print("Max Track Popularity: ", track_popularity.max())
print("Min Track Popularity: ", track_popularity.min())

print("Average Artist Popularity: ", artist_popularity.mean())
print("Median Artist Popularity: ", artist_popularity.median())
print("Max Artist Popularity: ", artist_popularity.max())
print("Min Artist Popularity: ", artist_popularity.min())

# Set up the figure for Artist Popularity with two subplots (barplot and scatterplot) side by side
fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(25, 6))

# Bar Plot on the first subplot
ax1.bar(artist_popularity, artist_popularity, color='#1f77b4')
ax1.axhline(y=artist_popularity.mean(), color='red', linestyle='--', label='Average Popularity')
ax1.set_xlabel('Artist')
ax1.set_ylabel('Popularity')
ax1.set_title('Artist Popularity')
ax1.legend()

# Scatter Plot on the second subplot
ax2.scatter(range(len(artist_popularity)), artist_popularity, color='skyblue')
ax2.axhline(y=artist_popularity.mean(), color='red', linestyle='--', label='Average Popularity')
ax2.set_xlabel('Artist')
ax2.set_ylabel('Popularity')
ax2.set_title('Artist Popularity')
ax2.legend()

# Adjust layout and show plot
plt.tight_layout()
plt.show()

# Set up the figure for Track Popularity with two subplots (barplot and scatterplot) side by side
fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(25, 6))

# Bar Plot on the first subplot
ax1.bar(track_popularity, track_popularity, color='#1f77b4')
ax1.axhline(y=track_popularity.mean(), color='red', linestyle='--', label='Average Track Popularity')
ax1.set_xlabel('Tracks')
ax1.set_ylabel('Popularity')
ax1.set_title('Track Popularity')
ax1.legend()

# Scatter Plot on the second subplot
ax2.scatter(range(len(track_popularity)), track_popularity, color='skyblue')
ax2.axhline(y=track_popularity.mean(), color='red', linestyle='--', label='Average Track Popularity')
ax2.set_xlabel('Tracks')
ax2.set_ylabel('Popularity')
ax2.set_title('Track Popularity')
ax2.legend()

# Adjust layout and show plot
plt.tight_layout()
plt.show()

"""##Track Duration

Does Obama prefer short or long songs?
"""

df["duration_min"].mean()

df["duration_min"].median()

df["duration_min"].min()

df["duration_min"].max()

#histogram of duration of songs
plt.figure(figsize=(10, 6))
plt.hist(df['duration_min'], bins=30, color='#1f77b4')
plt.xlabel('Duration (min)')
plt.ylabel('Frequency')
plt.title('Distribution of Song Durations')
plt.show()

"""##Music Features"""

df["danceability"].mean()

df["loudness"].mean()

df["valence"].mean()

df["time_signature"].value_counts()

df["mode"].value_counts()

plt.figure(figsize=(20,20))

for i,category in enumerate(['danceability', 'energy', 'loudness', 'speechiness', 'instrumentalness', 'acousticness', 'liveness', 'valence', 'tempo']):
    plt.subplot(3, 3, i+1)
    plt.hist(df[category], bins=30)
    plt.text(plt.xlim()[1] - (plt.xlim()[1] - plt.xlim()[0])*0.3,
                plt.ylim()[1]*0.9, r'$\mu=$'+str(df[category].mean())[:7], fontsize=12)
    plt.xlabel('Value')
    plt.ylabel('Num Tracks')
    plt.title(category)

plt.tight_layout(h_pad=2)

plt.figure(figsize=(15,4))

plt.subplot(1, 3, 1)
sns.countplot(df, x='time_signature', hue='time_signature', legend=False)
plt.xlabel('Beats per measure')
plt.ylabel('Num Tracks')
plt.title('Time Signature')

plt.subplot(1, 3, 2)
sns.countplot(df, x='key', hue='key', palette='flare', legend=False)
plt.xticks(ticks=pyplot.xticks()[0], labels=['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B'])
plt.ylabel('Num Tracks')
plt.title('Key')

plt.subplot(1, 3, 3)
sns.countplot(df, x='mode', hue='mode', legend=False)
plt.xticks(ticks=pyplot.xticks()[0], labels=['Major', 'minor'])
plt.ylabel('Num Tracks')
plt.title('Major vs Minor Key');

plt.tight_layout(w_pad=2)

"""the vast majority of the tracks are in 4/4 time signature but interestingly enough the majority of the tracks are in G major, A major and D minor. About 2/3 of the tracks are in minor key. Maybe this is the reason for a relatively balanced valence of 0,56? Tracks in B major are obviously not very attractive to Obama.

"""